syntax = "proto3";

package finesse;
// To compile proto files: protoc --c_out=. finesse.proto
/* note that these definitions are based upon the existing FUSE definitions */

message FinesseFuseAttribute {
	uint64        ino = 1;
	uint64        size = 2;
	uint64        blocks = 3;
	uint64        atime = 4;
	uint64        mtime = 5;
	uint64        ctime = 6;
	uint32        atimensec = 7;
	uint32        mtimensec = 8;
	uint32        ctimensec = 9;
	uint32        mode = 10;
	uint32        nlink = 11;
	uint32        uid = 12;
	uint32        gid = 13;
	uint32        rdev = 14;
	uint32        blksize = 15;
}

message FinesseFuseEntryOut {
	uint64        nodeid = 1; 
	uint64        generation = 2;
	uint64        entry_valid = 3; 
	uint64        attr_valid = 4;
	uint32        entry_valid_nsec = 5;
	uint32        attr_valid_nsec = 6;
	FinesseFuseAttribute attr = 7;
}

message FinesseFuseDirent {
	uint64        ino = 1;
	uint64        off = 2;
	uint32        namelen = 3;
	uint32        type = 4;
	string        name = 5;
}

message FinesseFuseDirentPlus {
	FinesseFuseEntryOut entry_out = 1;
	FinesseFuseDirent   dirent = 2;
}

/* this is the layout of the directory map in shared memory */
message FinesseDirMap {
	repeated FinesseFuseDirentPlus dirmap = 1;	
}


message FLock {
	uint32 Type = 1;
	uint32 Whence = 2;
	uint64 Start = 3;
	uint64 Length = 4;
	uint64 Owner = 5;
}

message FinesseMessageHeader {
	string ProtocolName = 1;
	uint64 MessageId = 3;
	enum Operation {
		TEST = 0;
		NAME_MAP = 1;
		NAME_MAP_RELEASE = 2;
		DIR_MAP = 3;
		DIR_MAP_RELEASE = 4;
		UNLINK = 5;
		PATH_SEARCH = 6;
		STATFS = 7;
		FSTATFS = 8;
		GETATTR = 9;
		SETATTR = 10;
		READLINK = 11;
		MKDIR = 12;
		MKNOD = 13;
		RMDIR = 14;
		SYMLINK = 15;
		RENAME = 16;
		LINK = 17;
		READ = 18;
		WRITE = 19;
		FLUSH = 20;
		FSYNC = 21;
		OPENDIR = 22;
		READDIR = 23;
		RELEASEDIR = 24;
		FSYNCDIR = 25;
		SETXATTR = 26;
		GETXATTR = 27;
		LISTXATTR = 28;
		REMOVEXATTR = 29;
		ACCES = 30;
		CREATE = 31;
		GETLK = 32;
		SETLK = 33;
		BMAP = 34;
		IOCTL = 35;
		POLL = 36;
		WRITE_BUF = 37;
		FLOCK = 38;
		FALLOCATE = 39;
		READDIRPLUS = 40;
		// This value should always be the highest possible op code
		MAX_REQUEST = 49;
	}
	Operation Op = 4;
}

message FinesseRequest {
	FinesseMessageHeader Header = 1;
	bytes  ClientUuid = 2;
	message NameMap {
		string Name = 1;
	}

	message NameMapRelease {
		bytes Key = 1;
	}

	message DirMap {
		oneof KeyType {
			string Name = 1;
			bytes Key = 2;
		}
	}

	message DirMapRelease {
		bytes Key = 1;
	}

	message Unlink {
		string Name = 1;
	}

	message PathSearch {
		bool MemorMap = 1;
		repeated string files = 2;
		repeated string paths = 3;
	}
	
	message Statfs {
		string Path = 1;
	}	
	
	message FStatfs {
		uint64 Nodeid = 1;
	}

	message GetAttr {
	}

	message SetAttr {
		FinesseFuseAttribute NewAttr = 1;
	}

	message ReadLink {
	}

	message MkDir {
		bytes Parent = 1;
		string Name = 2;
		uint32 Mode = 3;
	}

	message MkNod {
		bytes Parent = 1;
		string Name = 2;
		uint32 Mode = 3;
		uint32 RDev = 4;
	}

	message RmDir {
		string Name = 1;
	}

	message Symlink {
		bytes Parent = 1;
		string Link = 2;
		string Name = 3;
	}

	message Rename {
		bytes Parent = 1;
		string Name = 2;
		bytes NewParent = 3;
		string NewName = 4;
		uint32 Flags = 5;
	}

	message Link {
		bytes Parent = 1;
		bytes NewParent = 2;
		string NewName  = 3;
	}

	message Read {
		uint64 Size = 1;
		uint64 Offset = 2;
	}

	message Write {
		uint64 Size = 1;
		uint64 Offset = 2;
	}

	message Flush {
	}

	message FSync {
		bool DataSync = 1;
	}

	message OpenDir {

	}

	message ReadDir {
		uint64 Size = 1;
		uint64 Offset = 2;
	}

	message ReleaseDir {

	}

	message FSyncDir {
		bool DataSync = 1;
	}

	message SetXAttr {
		string Name = 1;
		string Value = 2;
		uint64 Size = 3;
		uint32 Flags = 4;
	}

	message GetXAttr {
		string Name = 1;
		uint64 Size = 2;
	}

	message ListXAttr {
		uint64 Size = 1;
	}

	message RemoveXAttr {
		string Name = 1;
	}

	message Access {
		uint32 Mask = 1;
	}

	message Create {
		string Name = 1;
		uint32 Mode = 2;
	}

	message GetLk {
		FLock Flock = 1;
	}

	message SetLk {
		FLock Flock = 1;
		bool  Sleep = 2;
	}

	message Bmap {
		uint64 BlockSize = 1;
		uint64 Index = 2;
	}

	message Ioctl {
		uint32 Command = 1;
		bytes  Argument = 2;
		uint32 Flags = 3;
		bytes InputBuffer = 4;
		uint64 InputBufferSize = 5;
		uint64 OutputBufferSize = 6;
	}

	message Poll {
	}

	message WriteBuf {

	}

	message BSDFlock {
		uint32 Operation = 1;
	}

	message FAllocate {
		uint32 Mode = 1;
		uint64 Offset = 2;
		uint64 Length = 3;
	}

	message ReadDirPlus {
		uint64 Size = 1;
		uint64 Offset = 2;
	}

	oneof Request {
		NameMap 		NameMapReq = 3;
		NameMapRelease  NameMapReleaseReq = 4;
		DirMap 			DirMapReq = 5;
		DirMapRelease 	DirMapReleaseReq = 6;
		Unlink 			UnlinkReq = 7;
		PathSearch 		PathSearchReq = 8;
		Statfs			StatfsReq = 9;
		FStatfs	        FStatfsReq = 10;
		GetAttr			GetAttrReq = 11;
		SetAttr			SetAttrReq = 12;
		ReadLink		ReadLinkReq = 13;
		MkDir			MkDirReq = 14;
		MkNod			MkNodReq = 15;
		RmDir			RmDirReq = 16;
		Symlink			SymLinkReq = 17;
		Rename			RenameReq = 18;
		Link			LinkReq = 19;
		Read			ReadReq = 20;
		Write			WriteReq = 21;
		Flush			FlushReq = 22;
		FSync			FSyncReq = 23;
		OpenDir			OpenDirReq = 24;
		ReadDir			ReadDirReq = 25;
		ReleaseDir		ReleaseDirReq = 26;
		FSyncDir		FSyncDirReq = 27;
		SetXAttr		SetXAttrReq = 28;
		GetXAttr		GetXAttrReq = 29;
		ListXAttr		ListXAttrReq = 30;
		RemoveXAttr		RemoveXAttrReq = 31;
		Access			AccessReq = 32;
		Create			CreateReq = 33;
		GetLk			GetLkReq = 34;
		SetLk			SetLkReq = 35;
		Bmap			BmapReq = 36;
		Ioctl			IoctlReq = 37;
		Poll			PollReq = 38;
		WriteBuf		WriteBufReq = 39;
		BSDFlock		BSDFlockReq = 40;
		FAllocate		FAllocateReq = 41;
		ReadDirPlus		ReadDirPlusReq = 42;
	}
}

message StatFsStruc {
         sint64  f_bsize = 1;     /* optimal transfer block size */
         sint64  f_blocks = 2;    /* total data blocks in file system */
         sint64  f_bfree = 3;     /* free blocks in fs */
         sint64  f_bavail = 4;    /* free blocks avail to non-superuser */
         sint64  f_files = 5;     /* total file nodes in file system */
         sint64  f_ffree = 6;     /* free file nodes in fs */
         uint64  f_fsid = 7;      /* file system id */
	 sint64  f_frsize = 8;    /* fragment size */
	 uint64  f_flag = 9;      /* mount flags */
	 uint64  f_namemax = 10;  /* maximum filename length */
	 sint64  f_favail = 11;   /* maximum filename length */
}

message FinesseResponse {
	FinesseMessageHeader Header = 1;
	sint64 Status = 2;

	message NameMap {
		bytes Key = 1;
	}

	message DirMap {
		string Name = 1;
	}

	message PathSearch {
		string Name = 1;
	}

	message Statfs {
		StatFsStruc Statfsstruc = 1;
	}

	message FStatfs {
		StatFsStruc Statfsstruc = 1;
	}

	message SetAttr {
	}

	message ReadLink {
		string	Link = 1;
	}

	message MkDir {
	}

	message MkNod {
	}

	message RmDir {
	}

	message Symlink {
	}

	message Rename {
	}

	message Link {
	}

	message Read {
		bytes Data = 1;
	}

	message Write {
	}

	message Flush {
	}

	message FSync {
	}

	message OpenDir {
	}

	message ReadDir {
		bytes Data = 1;
	}

	message ReleaseDir {
	}

	message FSyncDir {
	}

	message SetXAttr {
	}

	message GetXAttr {
		string Value = 2;
		uint64 Size = 3;
	}

	message ListXAttr {
		uint64 Size = 1;
	}

	message RemoveXAttr {
		bytes Data = 1;
	}

	message Access {
	}

	message Create {
	}

	message GetLk {
		FLock Flock = 1;
	}

	message SetLk {
	}

	message Bmap {
	}

	message Ioctl {
		bytes OutputBuffer = 1;
	}

	message Poll {
	}

	message WriteBuf {

	}

	message BSDFlock {
		uint32 Operation = 1;
	}

	message FAllocate {
	}

	message ReadDirPlus {
		bytes Data = 1;
	}

	oneof Response {
		NameMap 				NameMapRsp = 3;
		DirMap 					DirMapRsp = 4;
		PathSearch 				PathSearchRsp = 5;
		Statfs					StatfsRsp = 6;
		FStatfs 				FStatfsRsp = 7;
		FinesseFuseAttribute	GetAttrRsp = 11;
		SetAttr					SetAttrRsp = 12;
		ReadLink				ReadLinkRsp = 13;
		MkDir					MkDirRsp = 14;
		MkNod					MkNodRsp = 15;
		RmDir					RmDirRsp = 16;
		Symlink					SymLinkRsp = 17;
		Rename					RenameRsp = 18;
		Link					LinkRsp = 19;
		Read					ReadRsp = 20;
		Write					WriteRsp = 21;
		Flush					FlushRsp = 22;
		FSync					FSyncRsp = 23;
		OpenDir					OpenDirRsp = 24;
		ReadDir					ReadDirRsp = 25;
		ReleaseDir				ReleaseDirRsp = 26;
		FSyncDir				FSyncDirRsp = 27;
		SetXAttr				SetXAttrRsp = 28;
		GetXAttr				GetXAttrRsp = 29;
		ListXAttr				ListXAttrRsp = 30;
		RemoveXAttr				RemoveXAttrRsp = 31;
		Access					AccessRsp = 32;
		Create					CreateRsp = 33;
		GetLk					GetLkRsp = 34;
		SetLk					SetLkRsp = 35;
		Bmap					BmapRsp = 36;
		Ioctl					IoctlRsp = 37;
		Poll					PollRsp = 38;
		WriteBuf				WriteBufRsp = 39;
		BSDFlock				BSDFlockRsp = 40;
		FAllocate				FAllocateRsp = 41;
		ReadDirPlus				ReadDirPlusRsp = 42;
	}
}
